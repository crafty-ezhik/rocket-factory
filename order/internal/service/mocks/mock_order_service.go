// Code generated for crafty-ezhik service
// Â© Crafty-ezhik 2025.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/crafty-ezhik/rocket-factory/order/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type MockOrderService
func (_mock *MockOrderService) Cancel(ctx context.Context, orderID uuid.UUID) error {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderService_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockOrderService_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
func (_e *MockOrderService_Expecter) Cancel(ctx interface{}, orderID interface{}) *MockOrderService_Cancel_Call {
	return &MockOrderService_Cancel_Call{Call: _e.mock.On("Cancel", ctx, orderID)}
}

func (_c *MockOrderService_Cancel_Call) Run(run func(ctx context.Context, orderID uuid.UUID)) *MockOrderService_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_Cancel_Call) Return(err error) *MockOrderService_Cancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderService_Cancel_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID) error) *MockOrderService_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockOrderService
func (_mock *MockOrderService) Create(ctx context.Context, userID uuid.UUID, parts []uuid.UUID) (uuid.UUID, float64, error) {
	ret := _mock.Called(ctx, userID, parts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 float64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (uuid.UUID, float64, error)); ok {
		return returnFunc(ctx, userID, parts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(ctx, userID, parts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) float64); ok {
		r1 = returnFunc(ctx, userID, parts)
	} else {
		r1 = ret.Get(1).(float64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r2 = returnFunc(ctx, userID, parts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOrderService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - parts []uuid.UUID
func (_e *MockOrderService_Expecter) Create(ctx interface{}, userID interface{}, parts interface{}) *MockOrderService_Create_Call {
	return &MockOrderService_Create_Call{Call: _e.mock.On("Create", ctx, userID, parts)}
}

func (_c *MockOrderService_Create_Call) Run(run func(ctx context.Context, userID uuid.UUID, parts []uuid.UUID)) *MockOrderService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 []uuid.UUID
		if args[2] != nil {
			arg2 = args[2].([]uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderService_Create_Call) Return(uUID uuid.UUID, f float64, err error) *MockOrderService_Create_Call {
	_c.Call.Return(uUID, f, err)
	return _c
}

func (_c *MockOrderService_Create_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, parts []uuid.UUID) (uuid.UUID, float64, error)) *MockOrderService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockOrderService
func (_mock *MockOrderService) Get(ctx context.Context, orderID uuid.UUID) (model.Order, error) {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Order, error)); ok {
		return returnFunc(ctx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Order); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOrderService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
func (_e *MockOrderService_Expecter) Get(ctx interface{}, orderID interface{}) *MockOrderService_Get_Call {
	return &MockOrderService_Get_Call{Call: _e.mock.On("Get", ctx, orderID)}
}

func (_c *MockOrderService_Get_Call) Run(run func(ctx context.Context, orderID uuid.UUID)) *MockOrderService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_Get_Call) Return(order model.Order, err error) *MockOrderService_Get_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_Get_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID) (model.Order, error)) *MockOrderService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function for the type MockOrderService
func (_mock *MockOrderService) Pay(ctx context.Context, orderID uuid.UUID, paymentMethod model.PaymentMethod) (uuid.UUID, error) {
	ret := _mock.Called(ctx, orderID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.PaymentMethod) (uuid.UUID, error)); ok {
		return returnFunc(ctx, orderID, paymentMethod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.PaymentMethod) uuid.UUID); ok {
		r0 = returnFunc(ctx, orderID, paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.PaymentMethod) error); ok {
		r1 = returnFunc(ctx, orderID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type MockOrderService_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
//   - paymentMethod model.PaymentMethod
func (_e *MockOrderService_Expecter) Pay(ctx interface{}, orderID interface{}, paymentMethod interface{}) *MockOrderService_Pay_Call {
	return &MockOrderService_Pay_Call{Call: _e.mock.On("Pay", ctx, orderID, paymentMethod)}
}

func (_c *MockOrderService_Pay_Call) Run(run func(ctx context.Context, orderID uuid.UUID, paymentMethod model.PaymentMethod)) *MockOrderService_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 model.PaymentMethod
		if args[2] != nil {
			arg2 = args[2].(model.PaymentMethod)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderService_Pay_Call) Return(uUID uuid.UUID, err error) *MockOrderService_Pay_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockOrderService_Pay_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID, paymentMethod model.PaymentMethod) (uuid.UUID, error)) *MockOrderService_Pay_Call {
	_c.Call.Return(run)
	return _c
}
