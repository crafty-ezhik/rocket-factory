// Code generated for crafty-ezhik service
// Â© Crafty-ezhik 2025.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/crafty-ezhik/rocket-factory/order/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPaymentClient creates a new instance of MockPaymentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentClient {
	mock := &MockPaymentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPaymentClient is an autogenerated mock type for the PaymentClient type
type MockPaymentClient struct {
	mock.Mock
}

type MockPaymentClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentClient) EXPECT() *MockPaymentClient_Expecter {
	return &MockPaymentClient_Expecter{mock: &_m.Mock}
}

// PayOrder provides a mock function for the type MockPaymentClient
func (_mock *MockPaymentClient) PayOrder(ctx context.Context, orderUUID uuid.UUID, userUUID uuid.UUID, paymentMethod model.PaymentMethod) (string, error) {
	ret := _mock.Called(ctx, orderUUID, userUUID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, model.PaymentMethod) (string, error)); ok {
		return returnFunc(ctx, orderUUID, userUUID, paymentMethod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, model.PaymentMethod) string); ok {
		r0 = returnFunc(ctx, orderUUID, userUUID, paymentMethod)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, model.PaymentMethod) error); ok {
		r1 = returnFunc(ctx, orderUUID, userUUID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentClient_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type MockPaymentClient_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID uuid.UUID
//   - userUUID uuid.UUID
//   - paymentMethod model.PaymentMethod
func (_e *MockPaymentClient_Expecter) PayOrder(ctx interface{}, orderUUID interface{}, userUUID interface{}, paymentMethod interface{}) *MockPaymentClient_PayOrder_Call {
	return &MockPaymentClient_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, orderUUID, userUUID, paymentMethod)}
}

func (_c *MockPaymentClient_PayOrder_Call) Run(run func(ctx context.Context, orderUUID uuid.UUID, userUUID uuid.UUID, paymentMethod model.PaymentMethod)) *MockPaymentClient_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 model.PaymentMethod
		if args[3] != nil {
			arg3 = args[3].(model.PaymentMethod)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPaymentClient_PayOrder_Call) Return(s string, err error) *MockPaymentClient_PayOrder_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPaymentClient_PayOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID uuid.UUID, userUUID uuid.UUID, paymentMethod model.PaymentMethod) (string, error)) *MockPaymentClient_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}
