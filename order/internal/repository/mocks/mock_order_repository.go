// Code generated for crafty-ezhik service
// Â© Crafty-ezhik 2025.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/crafty-ezhik/rocket-factory/order/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Create(ctx context.Context, order model.Order) (uuid.UUID, error) {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Order) (uuid.UUID, error)); ok {
		return returnFunc(ctx, order)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Order) uuid.UUID); ok {
		r0 = returnFunc(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = returnFunc(ctx, order)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
func (_e *MockOrderRepository_Expecter) Create(ctx interface{}, order interface{}) *MockOrderRepository_Create_Call {
	return &MockOrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *MockOrderRepository_Create_Call) Run(run func(ctx context.Context, order model.Order)) *MockOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.Order
		if args[1] != nil {
			arg1 = args[1].(model.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Create_Call) Return(uUID uuid.UUID, err error) *MockOrderRepository_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockOrderRepository_Create_Call) RunAndReturn(run func(ctx context.Context, order model.Order) (uuid.UUID, error)) *MockOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Get(ctx context.Context, orderID uuid.UUID) (model.Order, error) {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Order, error)); ok {
		return returnFunc(ctx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Order); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
func (_e *MockOrderRepository_Expecter) Get(ctx interface{}, orderID interface{}) *MockOrderRepository_Get_Call {
	return &MockOrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderID)}
}

func (_c *MockOrderRepository_Get_Call) Run(run func(ctx context.Context, orderID uuid.UUID)) *MockOrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Get_Call) Return(order model.Order, err error) *MockOrderRepository_Get_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderRepository_Get_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID) (model.Order, error)) *MockOrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Update(ctx context.Context, data model.UpdateOrderInfo, kind model.OrderUpdateKind) error {
	ret := _mock.Called(ctx, data, kind)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UpdateOrderInfo, model.OrderUpdateKind) error); ok {
		r0 = returnFunc(ctx, data, kind)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.UpdateOrderInfo
//   - kind model.OrderUpdateKind
func (_e *MockOrderRepository_Expecter) Update(ctx interface{}, data interface{}, kind interface{}) *MockOrderRepository_Update_Call {
	return &MockOrderRepository_Update_Call{Call: _e.mock.On("Update", ctx, data, kind)}
}

func (_c *MockOrderRepository_Update_Call) Run(run func(ctx context.Context, data model.UpdateOrderInfo, kind model.OrderUpdateKind)) *MockOrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UpdateOrderInfo
		if args[1] != nil {
			arg1 = args[1].(model.UpdateOrderInfo)
		}
		var arg2 model.OrderUpdateKind
		if args[2] != nil {
			arg2 = args[2].(model.OrderUpdateKind)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Update_Call) Return(err error) *MockOrderRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Update_Call) RunAndReturn(run func(ctx context.Context, data model.UpdateOrderInfo, kind model.OrderUpdateKind) error) *MockOrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
