package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/brianvoe/gofakeit/v7"
	"github.com/google/uuid"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/reflection"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/crafty-ezhik/rocket-factory/inventory/internal/interceptor"
	inventoryV1 "github.com/crafty-ezhik/rocket-factory/shared/pkg/proto/inventory/v1"
)

const (
	HOST          = "localhost"
	PathToSwagger = "./shared/pkg/swagger/inventory/v1"
	grpcPort      = 50052
	httpPort      = 8082
)

type filter func(part *inventoryV1.Part) bool

// inventoryService - —Ä–µ–∞–ª–∏–∑—É–µ—Ç gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–ª–∞—Ç–∞–º–∏
type inventoryService struct {
	inventoryV1.UnimplementedInventoryServiceServer

	mu    sync.RWMutex
	store map[string]*inventoryV1.Part
}

// map2slice - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞–ø—É –≤ —Å–ª–∞–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
func (is *inventoryService) map2slice(data map[string]*inventoryV1.Part) []*inventoryV1.Part {
	sliceParts := make([]*inventoryV1.Part, 0, len(is.store))

	is.mu.RLock()
	defer is.mu.RUnlock()

	for _, v := range data {
		sliceParts = append(sliceParts, v)
	}
	return sliceParts
}

// GetPart - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
func (is *inventoryService) GetPart(ctx context.Context, req *inventoryV1.GetPartRequest) (*inventoryV1.GetPartResponse, error) {
	is.mu.RLock()
	defer is.mu.RUnlock()

	item, ok := is.store[req.GetUuid()]
	if !ok {
		return nil, status.Errorf(codes.NotFound, "item not found")
	}
	return &inventoryV1.GetPartResponse{Part: item}, nil
}

// ListParts - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
func (is *inventoryService) ListParts(ctx context.Context, req *inventoryV1.ListPartsRequest) (*inventoryV1.ListPartsResponse, error) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
	if req.GetFilter() == nil {
		return &inventoryV1.ListPartsResponse{Parts: is.map2slice(is.store)}, nil
	}

	var filteredParts []*inventoryV1.Part
	filters := getFilterFuncs(req.GetFilter())

	is.mu.RLock()
	defer is.mu.RUnlock()

	for _, part := range is.store {
		ok := true
		for _, filterFn := range filters {
			if !filterFn(part) {
				ok = false
				break
			}
		}

		if ok {
			filteredParts = append(filteredParts, part)
		}
	}

	return &inventoryV1.ListPartsResponse{
		Parts: filteredParts,
	}, nil
}

// set - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–∞–π—Å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
func set(data []string) map[string]struct{} {
	m := make(map[string]struct{})
	for _, v := range data {
		m[v] = struct{}{}
	}
	return m
}

// cat2string - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø []inventoryV1.Category –≤ []string –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
func cat2string(cats []inventoryV1.Category) []string {
	result := make([]string, 0, len(cats))
	for _, v := range cats {
		result = append(result, v.String())
	}
	return result
}

// getFilterFuncs - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
func getFilterFuncs(filterValues *inventoryV1.PartsFilter) []filter {
	uuidSet := set(filterValues.GetUuids())
	nameSet := set(filterValues.GetNames())
	catSet := set(cat2string(filterValues.GetCategories()))
	countrySet := set(filterValues.GetManufacturerCountries())
	tagSet := set(filterValues.GetTags())

	return []filter{
		func(part *inventoryV1.Part) bool {
			if len(uuidSet) > 0 {
				if _, ok := uuidSet[part.Uuid]; !ok {
					return false
				}
			}
			return true
		},
		func(part *inventoryV1.Part) bool {
			if len(nameSet) > 0 {
				if _, ok := nameSet[part.Name]; !ok {
					return false
				}
			}
			return true
		},
		func(part *inventoryV1.Part) bool {
			if len(catSet) > 0 {
				if _, ok := catSet[part.Category.String()]; !ok {
					return false
				}
			}
			return true
		},
		func(part *inventoryV1.Part) bool {
			if len(countrySet) > 0 {
				if _, ok := countrySet[part.Manufacturer.Country]; !ok {
					return false
				}
			}
			return true
		},
		func(part *inventoryV1.Part) bool {
			if len(tagSet) > 0 {
				exist := false
				for _, partTag := range part.Tags {
					if _, ok := tagSet[partTag]; ok {
						exist = true
					}
				}
				if !exist {
					return false
				}
			}
			return true
		},
	}
}

func main() {
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", grpcPort))
	if err != nil {
		log.Fatalf("failed to listen: %v\n", err)
		return
	}

	defer func() {
		if err := lis.Close(); err != nil {
			log.Fatalf("failed to close listener: %v\n", err)
		}
	}()

	grpcServer := grpc.NewServer(
		grpc.ChainUnaryInterceptor(
			interceptor.LoggerInterceptor(),
			interceptor.ValidatorInterceptor(),
		),
	)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å inventoryService
	service := &inventoryService{store: generateFakeData(10)}
	inventoryV1.RegisterInventoryServiceServer(grpcServer, service)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	reflection.Register(grpcServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	go func() {
		log.Printf("üöÄ gRPC server listening on %d\n", grpcPort)
		err = grpcServer.Serve(lis)
		if err != nil {
			log.Printf("failed to serve: %v\n", err)
			return
		}
	}()

	// –ü–æ–¥–Ω–∏–º–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è gRPC-gateway + Swagger UI
	var gwServer *http.Server
	go func() {
		ctx, cancel := context.WithCancel(context.Background())
		defer cancel()

		// –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
		mux := runtime.NewServeMux()

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å gRPC —Å–µ—Ä–≤–µ—Ä–æ–º
		opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º gRPC-gateway —Ö–µ–Ω–¥–ª–µ—Ä—ã
		err = inventoryV1.RegisterInventoryServiceHandlerFromEndpoint(
			ctx,
			mux,
			fmt.Sprintf("%s:%d", HOST, grpcPort),
			opts)
		if err != nil {
			log.Printf("failed to register gateway: %v\n", err)
			return
		}

		// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è swagger-ui
		fileServer := http.FileServer(http.Dir(PathToSwagger))

		// –°–æ–∑–¥–∞–µ–º HTTP –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
		httpMux := http.NewServeMux()

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API —Ä—É—á–∫—É
		httpMux.Handle("/api/v1/inventory/", mux)

		// Swagger UI —Ä—É—á–∫–∏
		httpMux.Handle("/swagger-ui.html", fileServer)
		httpMux.Handle("/inventory.swagger.json", fileServer)

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å –∫–æ—Ä–Ω—è –Ω–∞ Swagger UI
		httpMux.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if r.URL.Path == "/" {
				http.Redirect(w, r, "/swagger-ui.html", http.StatusMovedPermanently)
				return
			}
			fileServer.ServeHTTP(w, r)
		}))

		// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
		gwServer = &http.Server{
			Addr:              fmt.Sprintf(":%d", httpPort),
			Handler:           httpMux,
			ReadHeaderTimeout: 10 * time.Second,
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
		log.Printf("üåê HTTP server with gRPC-Gateway and Swagger UI listening on %d\n", httpPort)
		err = gwServer.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("Failed to serve HTTP: %v\n", err)
			return
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("üõë Shutting down gRPC server...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	if gwServer != nil {
		shutdownctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		if err := gwServer.Shutdown(shutdownctx); err != nil {
			log.Printf("HTTP server shutdown error: %v", err)
		}
		log.Println("‚úÖ HTTP server stopped")
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
	grpcServer.GracefulStop()
	log.Println("‚úÖ gRPC Server stopped")
}

func generateFakeData(n int) map[string]*inventoryV1.Part {
	fakeData := make(map[string]*inventoryV1.Part)
	catSlice := []inventoryV1.Category{
		inventoryV1.Category_ENGINE,
		inventoryV1.Category_FUEL,
		inventoryV1.Category_PORTHOLE,
		inventoryV1.Category_WING,
		inventoryV1.Category_UNKNOWN_UNSPECIFIED,
	}

	for range n {
		data := &inventoryV1.Part{
			Uuid:          uuid.NewString(),
			Name:          gofakeit.Name(),
			Description:   gofakeit.HackerPhrase(),
			Price:         math.Floor(gofakeit.Float64Range(1, 1000)*100) / 100,
			StockQuantity: int64(gofakeit.IntRange(1, 100)),
			Category:      catSlice[gofakeit.IntRange(0, len(catSlice)-1)],
			Dimensions: &inventoryV1.Dimensions{
				Length: gofakeit.Float64Range(1, 10000),
				Width:  gofakeit.Float64Range(1, 10000),
				Height: gofakeit.Float64Range(1, 10000),
				Weight: gofakeit.Float64Range(1, 10000),
			},
			Manufacturer: &inventoryV1.Manufacturer{
				Name:    gofakeit.Name(),
				Country: gofakeit.Country(),
				Website: gofakeit.URL(),
			},
			Tags:      []string{gofakeit.Word(), gofakeit.Word(), gofakeit.Word()},
			Metadata:  nil,
			CreatedAt: &timestamppb.Timestamp{Seconds: time.Now().Unix(), Nanos: 0},
			UpdatedAt: &timestamppb.Timestamp{Seconds: time.Now().Unix(), Nanos: 0},
		}

		fakeData[data.GetUuid()] = data
	}
	return fakeData
}
