package integration

import (
	"context"
	"os"
	"time"

	"github.com/testcontainers/testcontainers-go/wait"
	"go.uber.org/zap"

	"github.com/crafty-ezhik/rocket-factory/platform/pkg/logger"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/testcontainers"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/testcontainers/app"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/testcontainers/mongo"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/testcontainers/network"
)

const (
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	inventoryAppName    = "inventory-app"
	inventoryImageName  = "inventory-app:latest"
	inventoryDockerfile = "deploy/docker/inventory/Dockerfile"

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	grpcPortKey = "GRPC_PORT"

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	loggerLevelValue = "info"
	startupTimeout   = 3 * time.Minute
)

// TestEnvironment ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
type TestEnvironment struct {
	Network *network.Network
	Mongo   *mongo.Container
	App     *app.Container
}

func setupTestEnvironment(ctx context.Context) *TestEnvironment {
	logger.Info(ctx, "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

	// –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é Docker-—Å–µ—Ç—å
	generatedNetwork, err := network.NewNetwork(ctx, projectName)
	if err != nil {
		logger.Fatal(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—â—É—é —Å–µ—Ç—å", zap.Error(err))
	}

	logger.Info(ctx, "üî• –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏:", zap.String("networkName", generatedNetwork.Name())) // critical: –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MongoDB —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
	mongoUsername := getEnvWithLogging(ctx, testcontainers.MongoUsernameKey)
	mongoPassword := getEnvWithLogging(ctx, testcontainers.MongoPasswordKey)
	mongoImageName := getEnvWithLogging(ctx, testcontainers.MongoImageNameKey)
	mongoDatabase := getEnvWithLogging(ctx, testcontainers.MongoDatabaseKey)
	mongoAuthDb := getEnvWithLogging(ctx, testcontainers.MongoAuthDBKey)

	logger.Info(ctx, "üî• –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MongoDB", // critical: –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º
		zap.String("username", mongoUsername),
		zap.String("password", mongoPassword),
		zap.String("database", mongoDatabase),
		zap.String("image", mongoImageName),
		zap.String("authdbname", mongoAuthDb),
	)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç gRPC –¥–ª—è waitStrategy
	grpcPort := getEnvWithLogging(ctx, grpcPortKey)

	logger.Info(ctx, "üî• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ Mongo", // critical: –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º
		zap.String("network", generatedNetwork.Name()),
		zap.String("containerName", testcontainers.MongoContainerName),
		zap.String("containerImage", mongoImageName),
		zap.String("database", mongoDatabase),
		zap.String("username", mongoUsername),
		zap.String("password", mongoPassword),
	)

	// –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å MongoDB
	generatedMongo, err := mongo.NewContainer(ctx,
		mongo.WithNetworkName(generatedNetwork.Name()),
		mongo.WithContainerName(testcontainers.MongoContainerName),
		mongo.WithImageName(mongoImageName),
		mongo.WithDatabase(mongoDatabase),
		mongo.WithAuth(mongoUsername, mongoPassword),
		mongo.WithLogger(logger.Logger()),
		mongo.WithAuthDB(mongoAuthDb),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork})
		logger.Fatal(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	// –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
	// projectRoot := path.GetProjectRoot()

	logger.Info(ctx, "üî• –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ MongoDB", zap.String("containerName", generatedMongo.Config().ContainerName)) // critical: –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º

	appEnv := map[string]string{
		// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç MongoDB –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∏–∑ testcontainers
		testcontainers.MongoHostKey: generatedMongo.Config().ContainerName,
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	waitStrategy := wait.ForLog("=== INVENTORY SERVICE STARTED ===").
		WithStartupTimeout(90 * time.Second).
		WithPollInterval(500 * time.Millisecond)

	logger.Info(ctx, "üî• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º", // critical: –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–º
		zap.String("name", inventoryAppName),
		zap.String("port", grpcPort),
		zap.String("image", inventoryImageName),
		zap.String("networkName", generatedNetwork.Name()),
		zap.Any("env", appEnv),
	)

	appContainer, err := app.NewContainer(ctx,
		app.WithName(inventoryAppName),
		app.WithPort(grpcPort),
		// app.WithDockerfile(projectRoot, inventoryDockerfile),
		app.WithImage(inventoryImageName),
		app.WithNetwork(generatedNetwork.Name()),
		app.WithEnv(appEnv),
		app.WithLogOutput(os.Stdout),
		app.WithStartupWait(waitStrategy),
		app.WithLogger(logger.Logger()),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork, Mongo: generatedMongo})
		logger.Fatal(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	logger.Info(ctx, "üéâ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
	return &TestEnvironment{
		Network: generatedNetwork,
		Mongo:   generatedMongo,
		App:     appContainer,
	}
}

// getEnvWithLogging –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func getEnvWithLogging(ctx context.Context, key string) string {
	value := os.Getenv(key)
	if value == "" {
		logger.Warn(ctx, "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", zap.String("key", key))
	}

	return value
}
