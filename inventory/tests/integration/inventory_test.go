//go:build integration

package integration

import (
	"context"

	"github.com/google/uuid"
	"github.com/onsi/ginkgo/v2"
	"github.com/onsi/gomega"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	"github.com/crafty-ezhik/rocket-factory/inventory/internal/model"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/grpc/errors"
	"github.com/crafty-ezhik/rocket-factory/platform/pkg/logger"
	inventoryV1 "github.com/crafty-ezhik/rocket-factory/shared/pkg/proto/inventory/v1"
)

// –û–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
var _ = ginkgo.Describe("Inventory Service", func() {
	var (
		ctx             context.Context
		cancel          context.CancelFunc
		inventoryClient inventoryV1.InventoryServiceClient
	)

	// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
	ginkgo.BeforeEach(func() {
		ctx, cancel = context.WithCancel(suiteCtx)

		// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç
		conn, err := grpc.NewClient(
			env.App.Address(),
			grpc.WithTransportCredentials(insecure.NewCredentials()),
		)

		gomega.Expect(err).NotTo(gomega.HaveOccurred(), "–û–∂–∏–¥–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")

		inventoryClient = inventoryV1.NewInventoryServiceClient(conn)
	})

	// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
	ginkgo.AfterEach(func() {
		// –ß–∏—Å—Ç–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
		err := env.ClearPartsCollection(ctx)
		gomega.Expect(err).NotTo(gomega.HaveOccurred(), "–û–∂–∏–¥–∞–ª–∏ —É—Å–ø–µ—à–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

		cancel()
	})

	// Test 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
	ginkgo.Describe("Get", func() {
		var partUUID string

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å
		ginkgo.BeforeEach(func() {
			var err error
			partUUID, err = env.InsertTestPart(ctx)
			gomega.Expect(err).ToNot(gomega.HaveOccurred(), "–û–∂–∏–¥–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –≤ MongoDB")
		})

		ginkgo.It("–î–æ–ª–∂–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ç–∞–ª—å –ø–æ UUID", func() {
			resp, err := inventoryClient.GetPart(ctx, &inventoryV1.GetPartRequest{
				Uuid: partUUID,
			})

			part := resp.GetPart()

			gomega.Expect(err).ToNot(gomega.HaveOccurred())
			gomega.Expect(part.GetUuid()).To(gomega.Equal(partUUID))
			gomega.Expect(part.GetName()).ToNot(gomega.BeEmpty())
			gomega.Expect(part.GetCategory()).To(gomega.BeNumerically(">", 0))
			gomega.Expect(part.GetDescription()).ToNot(gomega.BeEmpty())
			gomega.Expect(part.GetManufacturer()).ToNot(gomega.BeNil())
			gomega.Expect(part.GetDimensions()).ToNot(gomega.BeNil())
			gomega.Expect(part.GetPrice()).To(gomega.BeNumerically(">", 0))
			gomega.Expect(part.GetTags()).ToNot(gomega.BeEmpty())
		})

		ginkgo.It("–î–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404 Not Found", func() {
			expectedErr := errors.BusinessErrorToGRPCStatus(model.ErrPartNotFound).Err()

			resp, err := inventoryClient.GetPart(ctx, &inventoryV1.GetPartRequest{
				Uuid: uuid.NewString(),
			})

			gomega.Expect(err).To(gomega.HaveOccurred())
			gomega.Expect(err).To(gomega.Equal(expectedErr))
			gomega.Expect(resp).To(gomega.BeNil())
		})

		ginkgo.It("–î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 400 Bad Request", func() {
			expectedErr := errors.BusinessErrorToGRPCStatus(model.ErrInvalidUUID).Err()

			resp, err := inventoryClient.GetPart(ctx, &inventoryV1.GetPartRequest{
				Uuid: "invalid-uuid",
			})

			gomega.Expect(err).To(gomega.HaveOccurred())
			gomega.Expect(err).To(gomega.Equal(expectedErr))
			gomega.Expect(resp).To(gomega.BeNil())
		})
	})

	// Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π
	ginkgo.Describe("ListParts", func() {
		partUUIDs := []string{}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
		ginkgo.BeforeEach(func() {
			partUUIDs = nil

			for range 3 {
				partUUID, err := env.InsertTestPart(ctx)
				gomega.Expect(err).ToNot(gomega.HaveOccurred(), "–û–∂–∏–¥–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –≤ MongoDB")
				partUUIDs = append(partUUIDs, partUUID)
			}
		})

		ginkgo.It("–§–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã–µ. –î–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤—Å–µ –¥–µ—Ç–∞–ª–∏", func() {
			logger.Info(ctx, "üß™ –¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã–µ. –î–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤—Å–µ –¥–µ—Ç–∞–ª–∏")
			resp, err := inventoryClient.ListParts(ctx, &inventoryV1.ListPartsRequest{
				Filter: nil,
			})

			gomega.Expect(err).ToNot(gomega.HaveOccurred())
			gomega.Expect(resp.Parts).ToNot(gomega.BeEmpty())
			gomega.Expect(len(resp.Parts)).ToNot(gomega.BeZero())
			gomega.Expect(len(resp.Parts)).To(gomega.BeNumerically("==", 3))
		})
		ginkgo.It("–ü–µ—Ä–µ–¥–∞–Ω –∏–º–µ—é—â–∏–π—Å—è UUID. –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 1 –¥–µ—Ç–∞–ª–∏", func() {
			logger.Info(ctx, "üß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–¥–∞–Ω –∏–º–µ—é—â–∏–π—Å—è UUID. –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 1 –¥–µ—Ç–∞–ª–∏")
			resp, err := inventoryClient.ListParts(ctx, &inventoryV1.ListPartsRequest{
				Filter: &inventoryV1.PartsFilter{
					Uuids: []string{partUUIDs[0]},
				},
			})

			gomega.Expect(err).ToNot(gomega.HaveOccurred())
			gomega.Expect(resp.Parts[0].GetUuid()).To(gomega.Equal(partUUIDs[0]))
			gomega.Expect(len(resp.Parts)).To(gomega.BeNumerically("==", 1))
		})
		ginkgo.It("–ü–µ—Ä–µ–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π UUID. –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫", func() {
			logger.Info(ctx, "üß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π UUID. –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
			resp, err := inventoryClient.ListParts(ctx, &inventoryV1.ListPartsRequest{
				Filter: &inventoryV1.PartsFilter{
					Uuids: []string{uuid.NewString()},
				},
			})

			gomega.Expect(err).ToNot(gomega.HaveOccurred())
			gomega.Expect(resp.Parts).To(gomega.BeEmpty())
		})
	})
})
