// Code generated for crafty-ezhik service
// Â© Crafty-ezhik 2025.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/crafty-ezhik/rocket-factory/inventory/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInventoryService creates a new instance of MockInventoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInventoryService {
	mock := &MockInventoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInventoryService is an autogenerated mock type for the InventoryService type
type MockInventoryService struct {
	mock.Mock
}

type MockInventoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryService) EXPECT() *MockInventoryService_Expecter {
	return &MockInventoryService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) Get(ctx context.Context, partID uuid.UUID) (model.Part, error) {
	ret := _mock.Called(ctx, partID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Part, error)); ok {
		return returnFunc(ctx, partID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Part); ok {
		r0 = returnFunc(ctx, partID)
	} else {
		r0 = ret.Get(0).(model.Part)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, partID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInventoryService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - partID uuid.UUID
func (_e *MockInventoryService_Expecter) Get(ctx interface{}, partID interface{}) *MockInventoryService_Get_Call {
	return &MockInventoryService_Get_Call{Call: _e.mock.On("Get", ctx, partID)}
}

func (_c *MockInventoryService_Get_Call) Run(run func(ctx context.Context, partID uuid.UUID)) *MockInventoryService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_Get_Call) Return(part model.Part, err error) *MockInventoryService_Get_Call {
	_c.Call.Return(part, err)
	return _c
}

func (_c *MockInventoryService_Get_Call) RunAndReturn(run func(ctx context.Context, partID uuid.UUID) (model.Part, error)) *MockInventoryService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) List(ctx context.Context, filters model.PartsFilter) ([]model.Part, error) {
	ret := _mock.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.PartsFilter) ([]model.Part, error)); ok {
		return returnFunc(ctx, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.PartsFilter) []model.Part); ok {
		r0 = returnFunc(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.PartsFilter) error); ok {
		r1 = returnFunc(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockInventoryService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filters model.PartsFilter
func (_e *MockInventoryService_Expecter) List(ctx interface{}, filters interface{}) *MockInventoryService_List_Call {
	return &MockInventoryService_List_Call{Call: _e.mock.On("List", ctx, filters)}
}

func (_c *MockInventoryService_List_Call) Run(run func(ctx context.Context, filters model.PartsFilter)) *MockInventoryService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.PartsFilter
		if args[1] != nil {
			arg1 = args[1].(model.PartsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_List_Call) Return(parts []model.Part, err error) *MockInventoryService_List_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockInventoryService_List_Call) RunAndReturn(run func(ctx context.Context, filters model.PartsFilter) ([]model.Part, error)) *MockInventoryService_List_Call {
	_c.Call.Return(run)
	return _c
}
